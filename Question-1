import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.datasets import load_iris
from sklearn.preprocessing import StandardScaler
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
from sklearn.decomposition import PCA


iris = load_iris()
X = iris.data  # Features
y = iris.target  # Class labels


df = pd.DataFrame(X, columns=iris.feature_names)
df['target'] = y

scaler = StandardScaler()
X_std = scaler.fit_transform(X)


lda = LinearDiscriminantAnalysis(n_components=2)
X_lda = lda.fit_transform(X_std, y)


plt.figure(figsize=(10, 5))
for i, color, label in zip([0, 1, 2], ['r', 'g', 'b'], iris.target_names):
    plt.scatter(X_lda[y == i, 0], X_lda[y == i, 1], color=color, label=label, alpha=0.7, edgecolors='k')
plt.xlabel('LDA Component 1')
plt.ylabel('LDA Component 2')
plt.title('LDA on Iris Dataset')
plt.legend()
plt.show()


pca = PCA(n_components=2)
X_pca = pca.fit_transform(X_std)


plt.figure(figsize=(10, 5))
for i, color, label in zip([0, 1, 2], ['r', 'g', 'b'], iris.target_names):
    plt.scatter(X_pca[y == i, 0], X_pca[y == i, 1], color=color, label=label, alpha=0.7, edgecolors='k')
plt.xlabel('PCA Component 1')
plt.ylabel('PCA Component 2')
plt.title('PCA on Iris Dataset')
plt.legend()
plt.show()
